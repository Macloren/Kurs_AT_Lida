# Напишите функцию segment
# На вход подается два кортежа с координатами точек (x1, y1), (x2, y2)

# В функции происходит проверка на корректность полученных данных.
# С помощью инструкции try/except as отлавливается исключение Exception. И если это исключение поймано,
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экзепляра класса Exception)
# Если исключения не произошло, то функция возвращает сумму всех координат


def segment(dot_coordinate_1, dot_coordinate_2):
    """
    Функция проверяет корректность полученных данных из двух кортежей с координатами точек
    (x1, y1), (x2, y2).
    Если данные проходят проверку, то функция суммирует координаты кортежей.
    Если проверка не пройдена выдает тест исключения, задом наперед.
    dot_coordinate_1: Первый кортеж с координатами точек (х1, у1)
    dot_coordinate_2: Второй кортеж с координатами точек (х2, у2)
    :return: Возвращает сумму всех координат или текст исключения задом на перед, если оно произошло.
    """
    x1, y1 = dot_coordinate_1
    x2, y2 = dot_coordinate_2

    try:
        return x1 + y1 + y2 + x2
    except Exception as ex:
        error = ex.args[0]
        return error[::-1]

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    ((2, 3), (4, 5)),
    ((2, -3), (4, 5)),
    ((2, 3), ('4', 5)),
    (('a', 3), (4, 5)),
]

test_data = [
    14,
    8,
    "'rts' dna 'tni' :+ rof )s(epyt dnarepo detroppusnu",
    'rts ot )"tni" ton( rts etanetacnoc ylno nac']


for i, d in enumerate(data):
    assert segment(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
